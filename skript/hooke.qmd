## Messreihe Hooke'sches Gesetz
Das [Hooke'sche Gesetz](https://de.wikipedia.org/wiki/Hookesches_Gesetz), benannt nach dem englischen Wissenschaftler Robert Hooke, beschreibt die Beziehung zwischen der Kraft $F$ und der Längenänderung $\Delta{x}$ einer Feder durch die Gleichung $F = k \times \Delta{x}$, wobei $k$ die Federkonstante ist. Die Federkonstante ist eine grundlegende Eigenschaft elastischer Materialien und gibt an, wie viel Kraft erforderlich ist, um eine Feder um eine bestimmte Läange zu dehnen oder zu komprimieren. Das Hooke'sche Gesetz besagt, dass die Deformation eines elastischen Körpers proportional zur aufgebrachten Kraft ist, solange die Feder nicht über den elastischen Bereich hinaus gedehnt oder gestaucht wird.

In einem Experiment wurde das Hooke'sche Gesetz experimentell überprüft.

```{python}
#| echo: false

import numpy as np
import pandas as pd
```

::: {#nte-versuchsaufbau .callout-note collapse="true"}
## Der Versuchsaufbau

![Versuchsaufbau](00-bilder/aufbau.png){fig-alt="Darstellung des Versuchsaufbaus. An einer an einer Halterung hängenden Metallfeder ist ein (variables) Gewicht angebracht. Darunter befindet sich in einigem Abstand ein Ultraschallsensor zur Abstandsmessung. Der Abstand zwischen der Unterseite des an der Feder befestigten Gewichts und dem Ultraschallsensor ist der gemessene Abstand."}

:::

Die Messreihe liegt in Form einer CSV-Datei unter dem Pfad "01-daten/hooke_data.csv" vor. Die Datei kann direkt mit Python oder mit den Modulen NumPy und Pandas eingelesen werden.

```{python}
dateipfad = "01-daten/hooke_data.csv"
```

::: {.panel-tabset}
## Python

```{python}
# Datei einlesen
dateiobjekt = open(file = dateipfad, mode = "r")
hooke = dateiobjekt.read() # liefert einen string zurück
dateiobjekt.close()

# Daten betrachten
print(hooke[0:30])

```

Die Einträge in der Datei liegen zeilenweise, d. h. durch das Zeichen `\n` getrennt vor. Die Werte in jeder Zeile sind mit Semikolon separiert. Mit der Methode `str.split()` können die Einträge in Listen eingelesen werden. Dabei stört eine leere Zeile, die von der Methode, `dateiobjekt.read()` [am Dateiende zurückgegeben](https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects) wird, die deshalb übersprungen wird.

```{python}
liste_hooke_zeilenweise = hooke.split("\n")
print(liste_hooke_zeilenweise[0:3], "\n")

# leere listen anlegen
number = []
mass = []
distance = []

for zeile in liste_hooke_zeilenweise:
  zwischenspeicher = zeile.split(';')
  if zeile == '':
    print("leere Zeile:", list(zeile))
    continue
  else:
    number.append(zwischenspeicher[0])
    mass.append(zwischenspeicher[1])
    distance.append(zwischenspeicher[2])

print("\n")
print("Liste number:", number[0:10], "\n")
print("Liste mass:", mass[0:10], "\n")
print("Liste distance:", distance[0:10])
```

Zuletzt können die ursprünglichen Spaltenbeschriftungen entfernt und die Datentypen angepasst werden.

```{python}
# ersten Eintrag entfernen
number = number[1:]
mass = mass[1:]
distance = distance[1:]

# Datentyp ändern
i = 0
for element in number:
  number[i] = int(element)
  i += 1

i = 0
for element in mass:
  mass[i] = int(element)
  i += 1  

i = 0
for element in distance:
  distance[i] = float(element)
  i += 1

print("Liste number:", number[0:10], "\n")
print("Liste mass:", mass[0:10], "\n")
print("Liste distance:", distance[0:10])
```

## NumPy
Der Aufbau der Datei ist aus dem Einlesen mit der Pythonbasis bekannt. Da NumPy-Arrays nur einen Datentyp haben können, müssen die Spaltenbeschriftungen in ein extra Objekt eingelesen werden.
```{python}
import numpy as np
hooke_nparray = np.loadtxt(fname = dateipfad, skiprows = 1, delimiter = ';')
hooke_colnames = np.loadtxt(fname = dateipfad, max_rows = 1, delimiter = ';', dtype = 'str')

print(hooke_colnames)
print(hooke_nparray[0:5])
```

## Pandas
Mit Pandas ist das Einlesen der Datei leicht.

```{python}
import pandas as pd
hooke = pd.read_csv(filepath_or_buffer = dateipfad, sep = ';')

print(hooke.head(), "\n")
print(hooke.info())
```

:::

### Deskriptive Statistik
Nach dem Einlesen sollte man sich einen Überblick über die Daten verschaffen. Dafür eignet sich besonders das Modul Pandas. Mit den Methoden `pd.DataFrame.head()` und `pd.DataFrame.tail()` kann schnell ein Ausschnitt der Daten betrachtet werden. 
```{python}
print(hooke.head(), "\n")
print(hooke.tail())
```

&nbsp;

Die Methode `pd.DataFrame.describe()` erstellt die deskriptive Statistik für den Datensatz. Diese ist in diesem Fall jedoch noch nicht sonderlich nützlich. Die Spalte 'no' enthält lediglich eine laufende Versuchsnummer, die Spalte 'mass' enhält verschiedene Gewichte.

```{python}
hooke.describe()
```

&nbsp;

Sinnvoller ist eine nach dem verwendeten Gewicht aufgeteilte beschreibende Statistik der gemessenen Ausdehnung. Dafür kann die Pandas-Methode `pd.DataFrame.groupby()` verwendet werden. So kann für jedes der gemessenen Gewichte der arithmethische Mittelwert und die Standardabweichung abgelesen werden.

```{python}
hooke.groupby(by = 'mass')['distance'].describe()
```

&nbsp;

Bereits an dieser Stelle könnte die hohe Standardabweichung in der Messreihe mit 0 Gramm auffallen. Leichter ist es jedoch in der grafischen Betrachtung.

```{python}
#| fig-alt: "Darstellung des auf der x-Achse aufgetragenen Gewichts und des auf der y-Achse aufgetragenen gemessenen Abstands."

hooke.plot(x = 'mass', y = 'distance', kind = 'scatter', title = "Messreihe Hooke`sches Gesetz", ylabel = 'Abstand in cm', xlabel = 'Gewicht in Gramm')
```

&nbsp;

Grafisch fällt der Messwert von 200 cm für das Gewicht 0 Gramm als stark von den übrigen Messwerten abweichend auf.

Die Messwerte für das Gewicht 0 Gramm sollen näher betrachtet werden. Dafür werden die Messwerte sowohl absolut, als auch [standardisiert in Einheiten der Standardabweichung (z-Werten)](https://de.wikipedia.org/wiki/Standardisierung_(Statistik)) ausgedrückt ausgegeben.

```{python}
gewicht = 0

z_values = hooke[hooke['mass'] == gewicht].loc[: , 'distance'].apply(lambda x: (x - hooke[hooke['mass'] == gewicht].loc[: , 'distance'].mean()) /  hooke[hooke['mass'] == gewicht].loc[: , 'distance'].std())
z_values.name = 'z-values'

print(pd.concat([hooke[hooke['mass'] == gewicht], z_values], axis = 1))
```

Der Wert 200 cm in Zeile 113 scheint fehlerhaft zu sein. Eine Eigendehnung der Feder um zusätzliche 16 Zentimeter ist nicht plausibel. Auch der z-Wert > 3 kennzeichnet den Messwert als [Ausreißer](https://de.wikipedia.org/wiki/Ausrei%C3%9Fer). Die Zeile wird deshalb aus dem Datensatz entfernt.

**hier Aufklapper Normalverteilung**

```{python}
hooke.drop(index = 113, inplace = True)

hooke.groupby(by = 'mass')['distance'].describe()
```

&nbsp;

Hiernach ist die höchste Standardabweichung für die Messreihe mit 301 Gramm zu verzeichnen. Die gemessenen Werte sind jedoch unauffällig.

```{python}
gewicht = 301

z_values = hooke[hooke['mass'] == gewicht].loc[: , 'distance'].apply(lambda x: (x - hooke[hooke['mass'] == gewicht].loc[: , 'distance'].mean()) /  hooke[hooke['mass'] == gewicht].loc[: , 'distance'].std())
z_values.name = 'z-values'

print(pd.concat([hooke[hooke['mass'] == gewicht], z_values], axis = 1))

```

Die Grafik des bereinigten Datensatzes legt einen linearen Zusammenhang nahe. Darüber hinaus sticht der mit zunehmendem Gewicht abfallende Trend der Datenpunkte ins Auge.

```{python}
#| fig-alt: "Darstellung des auf der x-Achse aufgetragenen Gewichts und des auf der y-Achse aufgetragenen gemessenen Abstands."

hooke.plot(x = 'mass', y = 'distance', kind = 'scatter', title = 'bereinigter Datensatz', ylabel = 'Abstand in cm', xlabel = 'Gewicht in Gramm')
```

&nbsp;

Entsprechend des Versuchsaufbaus nimmt mit zunehmender Dehnung der Feder der Abstand zum Abstandssensor ab. Da die Federausdehnung gemessen werden soll, bietet es sich an, die Daten entsprechend zu transformieren. Dazu wird der gemessene Abstand bei 0 Gramm Gewicht als Nullpunkt aufgefasst, von dem aus die Federdehnung gemessen wird. Das bedeutet, dass von allen Datenpunkten das arithmetische Mittel der für 0 Gramm Gewicht gemessen Ausdehnung abgezogen und das Ergebnis mit -1 multipliziert wird.

```{python}
#| fig-alt: "Darstellung des auf der x-Achse aufgetragenen Gewichts und des auf der y-Achse aufgetragenen Federausdehnung."

nullpunkt = hooke[hooke['mass'] == 0].loc[: , 'distance'].mean()
print(f"Nullpunkt: {nullpunkt:.2f} cm")

hooke['distance'] = hooke['distance'].sub(nullpunkt).mul(-1)

hooke.plot(x = 'mass', y = 'distance', kind = 'scatter', title = 'bereinigter und invertierter Datensatz', ylabel = 'Federausdehnung in cm', xlabel = 'Gewicht in Gramm')
```

## Federkonstante bestimmen
Die Beziehung zwischen der Kraft $F$ und der Längenänderung $\Delta{x}$ einer Feder mit Federkonstante $k$ wird durch die Gleichung $F = k \times \Delta{x}$ beschrieben. Dabei entspricht die Kraft $F$ dem mit der Fallbeschleunigung $g$  multiplizierten Gewicht in Kilogramm $m$. Die Fallbeschleunigung beträgt auf der Erde $9,81 \frac{m}{s^2}$.

Deshalb wird im Datensatz das in der Spalte 'mass' eingetragene Gewicht in Gramm in die wirkende Kraft umgerechnet. Ebenso wird die gemessene Abstandsänderung in der Spalte 'distance' von Zentimeter in Meter umgerechnet.

```{python}
hooke['mass'] = hooke['mass'].div(1000).mul(9.81)
hooke.rename(columns = {'mass': 'force'}, inplace = True)

hooke['distance'] = hooke['distance'].div(100)

print(hooke.head())
```

Für die grafische Darstellung des Zusammenhangs $F = k \times \Delta{x}$ ist es zweckmäßiger, die Abstandsänderung auf der x-Achse und die wirkende Kraft auf der y-Achse darzustellen.

```{python}
#| fig-alt: "Darstellung der auf der x-Achse aufgetragenen Federausdehnung und der auf der y-Achse aufgetragenen wirkenden Kraft."

hooke.plot(x = 'distance', y = 'force', kind = 'scatter', title = 'umgeformter Datensatz', ylabel = 'wirkende Kraft in $N$', xlabel = 'Abstandsänderung in Meter')
```

### Lineare Ausgleichsrechnung
Die Ausgleichsrechnung (oder auch Parameterschätzung) ist eine Methode, um für eine Messreihe die unbekannten Parameter des zugrundeliegenden physikalischen Modells zu schätzen. Das Ziel besteht darin, eine (in diesem Fall lineare) Funktion zu bestimmen, die bestmöglich an die Messdaten angepasst ist. ([Wikipedia](https://de.wikipedia.org/wiki/Ausgleichungsrechnung))

Eine lineare Funktion wird durch die Konstante $\beta_0$, den Schnittpunkt mit der y-Achse, und den Steigungskoeffizienten $\beta_1$ bestimmt.

$$
y = \beta_0 + \beta_1 \times x
$$

Zur Bestimmung der Parameter einer linearen Funktion wird die Methode der linearen [Regression](https://de.wikipedia.org/wiki/Regressionsanalyse) verwendet. Die Funktionen dafür stellt das Paket `numpy.polynomial` bzw. für Polynomfunktionen dessen Modul `numpy.polynomial.polynomial` bereit.

```{python}
import numpy.polynomial.polynomial as poly
```

#### polyfit und polyeval
Zur Schätzung von Funktionsparametern nach der Methode der kleinsten Quadrate wird die Funktion `poly.polyfit(x, y, deg)` verwendet. `x` sind die Werte der unabhängigen Variablen, `y` die Werte der abhängigen Variablen und `deg` spezifiziert den Grad der gesuchten Polynomfunktion. `deg = 1` spezifiziert eine lineare Funktion.

::: {#nte-polyfitpolyeval .callout-note collapse="true"}
## polyfit und polyeval erklärt

```{python}
# Beispieldaten erzeugen
x = np.array(list(range(0, 100)))
y = x ** 2

print(np.polynomial.polynomial.polyfit(x, y, 1))
```

Die Funktion gibt die geschätzten Regressionsparameter als NumPy-Array zurück. Die Terme sind aufsteigend angeordnet, d. h. der Achsabschnitt steht an Indexposition 0, der Steigungskoeffizient an Indexposition 1. Die Ausgabe für ein Polynom zweiten Grades würde beispielsweise so aussehen:

```{python}
print(np.polynomial.polynomial.polyfit(x, y, 2))
```

Mit den Regressionskoeffizienten können die Vorhersagewerte der linearen Funktion berechnet werden. Dafür kann die Funktion `poly.polyeval(x, c)` verwendet werden. Diese berechnet die Funktionswerte für in `x` übergebene Wert(e) mit den Funktionsparametern `c`.

```{python}
# 'manuelle' Berechnung
regressions_koeffizienten = np.polynomial.polynomial.polyfit(x, y, 1)
vorhersagewerte = regressions_koeffizienten[0] + x * regressions_koeffizienten[1]

# Berechnung mit polyeval
lm = np.polynomial.polynomial.polyfit(x, y, 1)
vorhersagewerte_polyval = np.polynomial.polynomial.polyval(x, lm)

print("Die Ergebnisse stimmen überein:", np.equal(vorhersagewerte, vorhersagewerte_polyval).all())
print("\nAusschnitt der Vorhersagewerte:", vorhersagewerte[:10])
```

Das [Bestimmtheitsmaß](https://de.wikipedia.org/wiki/Bestimmtheitsma%C3%9F) $R^2$ gibt an, wie gut die Schätzfunktion an die Daten angepasst ist. Der Wertebereich reicht von 0 bis 1. Ein Wert von 1 bedeutet eine vollständige Anpassung. Für eine einfache lineare Regression mit nur einer erklärenden Variable kann das Bestimmtheitsmaß als Quadrat des B[ravais-Pearson-Korrelationskoeffizienten](https://de.wikipedia.org/wiki/Korrelationskoeffizient_nach_Bravais-Pearson) $r$ berechnet werden. Dieser wird mit der Funktion `np.corrcoef(x, y)` ermittelt (die eine Matrix der Korrelationskoeffizienten ausgibt).

```{python}
print(f"r = {np.corrcoef(x, y)[0, 1]:.2f}")
print(f"R\u00b2 = {np.corrcoef(x, y)[0, 1] ** 2:.2f}")
```

Die Daten und die geschätzte Gerade können grafisch dargestellt werden.

```{python}
import matplotlib.pyplot as plt

plt.scatter(x, y, label = 'Beispieldaten')
plt.plot(x, vorhersagewerte, label = 'Vorhersagewerte')
plt.annotate("$R^2$ = {:.2f}".format(np.corrcoef(x, y)[0, 1] ** 2), (max(x) * 0.9, 1))

plt.title(label = 'Beispieldaten und geschätzte Linearfunktion')
plt.xlabel('x-Werte')
plt.ylabel('y-Werte')
plt.legend()

plt.show()
```

:::

::: {#nte-polyfit .callout-note collapse="true"}

## to do: numpy.polyfit & numpy.polyval
**in den Aufklapper verschieben**
legacy - wichtigster Unterschied: Ausgabe der Koeffizienten in umgekehrter Reihenfolge!

Warnung / ein Hinweis, dass man es nicht mehr benutzen soll.
https://numpy.org/doc/stable/reference/generated/numpy.polyfit.html

Hier auch noch mal deutlicher: https://numpy.org/doc/stable/reference/routines.polynomials.html
"As noted above, the poly1d class and associated functions defined in numpy.lib.polynomial, such as numpy.polyfit and numpy.poly, are considered legacy and should not be used in new code. Since NumPy version 1.4, the numpy.polynomial package is preferred for working with polynomials."

polyfit
https://numpy.org/doc/stable/reference/generated/numpy.polyfit.html

polyval
numpy.polyval(p, x) ... evaluiere Wert(e) p mit Modellkoeffizienten x.

https://numpy.org/doc/stable/reference/generated/numpy.polyval.html
:::

**Federkonstante bestimmen**

Die Parameter der an die Messwerte angepassten linearen Funktion und das Bestimmtheitsmaß lauten:
```{python}
print(np.polynomial.polynomial.polyfit(hooke['distance'], hooke['force'], 1))

print(f"r = {np.corrcoef(hooke['distance'], hooke['force'])[0, 1]:.2f}")
print(f"R\u00b2 = {np.corrcoef(hooke['distance'], hooke['force'])[0, 1] ** 2:.2f}")
```

Mit den Regressionskoeffizienten können die Vorhersagewerte der linearen Funktion berechnet werden. 

```{python}
# Berechnung mit polyeval
lm = np.polynomial.polynomial.polyfit(hooke['distance'], hooke['force'], 1)
vorhersagewerte_hooke = np.polynomial.polynomial.polyval(hooke['distance'], lm)
```

Die Messreihe und die darauf angepasste lineare Funktion können grafisch dargestellt werden.

```{python}
# Platzhalter
x = hooke['distance']
y = hooke['force']

# Plot erstellen
plt.scatter(x, y, label = 'Messdaten')
plt.plot(x, vorhersagewerte_hooke, label = 'Vorhersagewerte')
plt.annotate("$R^2$ = {:.2f}".format(np.corrcoef(x, y)[0, 1] ** 2), (max(x) * 0.9, 1))

plt.title(label = 'Messdaten und geschätzte Linearfunktion')
plt.xlabel('gemessene Abstandsänderung')
plt.ylabel('wirkende Kraft')
plt.legend()

plt.show()
```

### Messabweichung quantifizieren
Konfidenzintervall des Regressionskoeffizienten berechnen:

https://mountain-hydrology-research-group.github.io/data-analysis/modules/module4/lab4-3.html  
(benötigt aber stats für die t-Verteilung)


**to do: plt.errorbar (capsize = 3 macht kleine Linien an den Enden der Kerze)**

**wann / wozu braucht man das:** Durch Umstellen nach der Federkonstante $k$ kann diese wie folgt ermittelt werden:

$$
k = \frac{m \times g}{\Delta{x}}
$$