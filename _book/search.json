[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bausteine Computergestützter Datenanalyse",
    "section": "",
    "text": "Methodenbaustein Sensordatenanalyse\n\n\n\n\n\n\n\n\n\n\nBausteine Computergestützter Datenanalyse von Lukas Arnold, Simone Arnold, Florian Bagemihl, Matthias Baitsch, Marc Fehr, Maik Poetzsch und Sebastian Seipel. Methodenbaustein Sensordatenanalyse von Maik Poetzsch ist lizensiert unter CC BY 4.0. Das Werk ist abrufbar auf GitHub. Ausgenommen von der Lizenz sind alle Logos Dritter und anders gekennzeichneten Inhalte. 2025\n\n\n\nZitiervorschlag\nArnold, Lukas, Simone Arnold, Florian Bagemihl, Matthias Baitsch, Marc Fehr, Maik Poetzsch, und Sebastian Seipel. 2025. „Bausteine Computergestützter Datenanalyse. Methodenbaustein Sensordatenanalyse. https://github.com/bausteine-der-datenanalyse/m-sensordatenanalyse.\nBibTeX-Vorlage\n@misc{BCD-m-sensordatenanalyse-2025,\n title={Bausteine Computergestützter Datenanalyse. Methodenbaustein Sensordatenanalyse},\n author={Arnold, Lukas and Arnold, Simone and Bagemihl, Florian and Baitsch, Matthias and Fehr, Marc and Poetzsch, Maik and Seipel, Sebastian},\n year={2025},\n url={https://github.com/bausteine-der-datenanalyse/m-sensordatenanalyse}} \n\n\n\nVoraussetzungen\nDie Bearbeitungszeit dieses Bausteins beträgt circa Platzhalter. Für die Bearbeitung dieses Bausteins werden folgende Bausteine vorausgesetzt und die genannten Bibliotheken verwendet:\n\nnumpy\n\nnumpy.polynomial\n\npandas\nmatplotlib\n\nQuerverweis auf:\n\n…\n\nIm Baustein werden folgende Daten verwendet:\n\n\nLernziele\nIn diesen Baustein lernen Sie …\n\nStatistische Grundbegriffe\nSensorkennlinien\nKennlinienfehler und deren Korrektur",
    "crumbs": [
      "Methodenbaustein Sensordatenanalyse"
    ]
  },
  {
    "objectID": "skript/einleitung.html",
    "href": "skript/einleitung.html",
    "title": "1  Das Prinzip von Messungen",
    "section": "",
    "text": "1.1 Messreihen\nIn diesem Baustein werden die folgenden Module verwendet:\nPhysikalische Größen werden mit der Hilfe von Messgeräten bestimmt. Diese ordnen der tatsächlichen Merkmalsausprägung eine numerische Entsprechung relativ zu einem Bezugssystem zu. Ein Beispiel:\n“Johanna ist am Messbrett 173 Zentimeter groß.”\nMesswerte sind aus verschiedenen Gründen Annäherungen an den wahren Wert der zugrundeliegenden physikalischen Größe. Zum einen variiert die Größe eines Menschen im Tagesverlauf. Zum anderen ist das Messergebnis auch ein Ergebnis der verwendeten Skala. Wäre die Messung im imperialen Messsystem erfolgt, wäre Johannas Größe mit 68 Zoll bestimmt worden, was 172,72 Zentimetern entspricht.\nEin bekanntes Beispiel für die mit dem Messvorgang verbundene Unsicherheit ist das Küstenlinienparadox: Das Ergebnis der Vermessung unregelmäßiger Küstenlinien wird umso größer, je kleiner die Messabschnitte gewählt werden.\nUm die Unsicherheit einer Messung zu verringern, kann man einen Messwert in Form einer Messreihe wiederholt aufnehmen. Die (erste) beste Schätzung der Messgröße bietet der arithmetische Mittelwert der Messreihe.\nDer arithmetische Mittelwert einer Messreihe \\(\\bar{x}\\) ist die Summe aller Einzelmesswerte dividiert durch die Anzahl der Messwerte \\(N\\).\n\\[\n\\bar{x} = \\frac{1}{N} \\sum_{i=1}^{N} x_i\n\\]\nMit Hilfe des arithmetischen Mittelwerts kann eine Aussage über die Streuung der Messwerte getroffen werden. Dazu werden die Varianz und die Standardabweichung der Messreihe berechnet.\nMit Hilfe der Standardabweichung kann der Standardfehler der Messung bestimmt werden. Der Standardfehler ist ein Maß dafür, wie genau sich der arithmetische Mittelwert der Stichprobe an den tatsächlichen Mittelwert der Grundgesamtheit, den Erwartungswert, annähert (hierzu gleich mehr) und wird auch Stichprobenfehler genannt. Der Standardfehler wird aus der Standardabweichung einer Messung und der Wurzel der Stichprobengröße berechnet.\n\\[\n\\sigma{\\bar{x}} ~ = ~ \\frac{s}{\\sqrt{N}}\n\\]\nDer Standardfehler wird umso kleiner (die Messung umso genauer), je kleiner die Varianz in der Grundgesamtheit und je größer der Stichprobenumfang ist. Da die Varianz in der Grundgesamtheit in der Regel unbekannt ist, wird der Standardfehler mit der Stichprobenvarianz geschätzt.\nDer Schätzung des Standardfehlers liegt die Beobachtung zugrunde, dass Stichprobenmittelwerte normalverteilt sind und mit zunehmender Stichprobengröße immer genauer werden.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Das Prinzip von Messungen</span>"
    ]
  },
  {
    "objectID": "skript/einleitung.html#messreihen",
    "href": "skript/einleitung.html#messreihen",
    "title": "1  Das Prinzip von Messungen",
    "section": "",
    "text": "VarianzStandardabweichung\n\n\nDie Varianz ist der Mittelwert der quadrierten Abweichungen vom Mittelwert.\n\\[\n\\text{Var}(x_i) = \\frac{1}{N} \\sum_{i=1}^{N}(x_i - \\bar{x})^2\n\\]\nHier könnte statt \\(\\text{Var}(x_i)\\) auch \\(s^{2}\\) geschrieben werden.\n\n\nDie Quadratwurzel der Varianz wird als Standardabweichung bezeichnet. Diese hat den Vorteil, dass sie in der Einheit der Messwerte vorliegt und dadurch leichter zu interpretieren ist. Die Standardabweichung \\(s\\) wird folglich so berechnet:\n\\[\ns_{N} = \\sqrt{\\frac{1}{N} \\sum_{i=1}^{N}(x_i - \\bar{x})^2}\n\\]\nFür Stichproben wird die Stichprobenvarianz verwendet. Für die Standardabweichung einer Stichprobe gilt:\n\\[\ns_{N-1} = \\sqrt{\\frac{1}{N-1} \\sum_{i=1}^{N}(x_i - \\bar{x})^2}\n\\]\n\n\n\n\n\n\n\n\n\nDie Normalverteilung\nWenn eine Stichprobe aus einer Grundgesamtheit gezogen wird, dann streut der Stichprobenmittelwert um den Mittelwert der Grundgesamtheit, also den Erwartungswert. Der Erwartungswert eines sechsseitigen Würfels ist:\n\\[\n\\frac{1}{6} \\sum_{i=1}^{i=6}(x_i) ~ = ~ 3,5\n\\]\nErwartungsverteilung für n = 1 und für n = 2 ist illustrativ. Für einen Würfel gibt es 6 mögliche Ergebnisse, für 2 Würfel 6 * 6 mögliche Ergebnisse. Es gibt eine Kombination für den Wert 2, 2 Kombinationen für den Wert 3, usw.\nDies lässt sich mit einem mit Python simulierten Würfelexperiment verdeutlichen. In dem simulierten Experiment würfeln 10 Personen jeweils 5, 10 und 20 Mal und bilden anschließend den Mittelwert der Augen.\nto do: Dichtekurve der Normalverteilung mit den Parametern plotten\nDer Erwartungswert ist der höchste Punkt der Kurve. Die Wendepunkte der Kurve liegen jeweils eine Standardabweichung vom Mittelwert entfernt.\nFormel bei MB im Skript S. 52 ist anders gestellt als die unten\n\\[\nf(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}} ~ e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\n\\]\nThe normal distribution function, also known as the Gaussian distribution, is a continuous probability distribution characterized by its bell-shaped curve. It’s defined by two parameters: the mean (μ) and the standard deviation (σ). The probability density function (PDF) for a normal distribution is given by f(x) = (1/√(2πσ²)) * e^(-(x-μ)² / (2σ²))\nErwartungswert und Standardabweichung sind für die Grundgesamtheit bekannt. in eigener Zelle ausrechnen\n\npersonen = 10\n\n# 5 Würfe\nwürfe = 5\n\naugen = np.random.default_rng().integers(low = 1, high = 6, endpoint = True, size = (würfe, personen)) # high is exclusive if endpoint = False\n\nprint(f\"N: {augen.mean(axis = 0).shape[0]}\",\n      f\"kleinster Mittelwert: {augen.mean(axis = 0).min():.2f}\",\n      f\"größter Mittelwert: {augen.mean(axis = 0).max():.2f}\",\n      f\"Stichprobenmittelwert: {augen.mean(axis = 0).mean():.2f}\\n\")\n\n# plotten\nplt.subplot(1, 3, 1)\ncount, bins, ignored = plt.hist(augen.mean(axis = 0), bins = 10, alpha = 0.6, edgecolor = 'black')\nplt.xlim(1, 6)\n\n## Normalverteilungskurve\nerwartungswert = pd.Series([1, 2, 3, 4, 5, 6]).mean() # 3.5\nstandardabweichung = pd.Series([1, 2, 3, 4, 5, 6]).std(ddof = 0) # ~ 1.708\n\nx = np.linspace(0, 9, 100)\ny = 10 / (standardabweichung * np.sqrt(2 * np.pi)) * np.exp(- (x - erwartungswert) ** 2 / (2 * standardabweichung ** 2))\nplt.plot(x, y, 'k', linewidth=2)\n\n# 10 Würfe\nwürfe = 10\n\naugen = np.random.default_rng().integers(low = 1, high = 6, endpoint = True, size = (würfe, personen)) # high is exclusive if endpoint = False\n\nprint(f\"N: {augen.mean(axis = 0).shape[0]}\",\n      f\"kleinster Mittelwert: {augen.mean(axis = 0).min():.2f}\",\n      f\"größter Mittelwert: {augen.mean(axis = 0).max():.2f}\",\n      f\"Stichprobenmittelwert: {augen.mean(axis = 0).mean():.2f}\\n\")\n\nplt.subplot(1, 3, 2)\nplt.hist(augen.mean(axis = 0), bins = 10, alpha = 0.6, edgecolor = 'black')\nplt.xlim(1, 6)\n\n# 20 Würfe\nwürfe = 20\n\naugen = np.random.default_rng().integers(low = 1, high = 6, endpoint = True, size = (würfe, personen)) # high is exclusive if endpoint = False\n\nprint(f\"N: {augen.mean(axis = 0).shape[0]}\",\n      f\"kleinster Mittelwert: {augen.mean(axis = 0).min():.2f}\",\n      f\"größter Mittelwert: {augen.mean(axis = 0).max():.2f}\",\n      f\"Stichprobenmittelwert: {augen.mean(axis = 0).mean():.2f}\\n\")\n\nplt.subplot(1, 3, 3)\nplt.hist(augen.mean(axis = 0), bins = 10, alpha = 0.6, edgecolor = 'black')\nplt.xlim(1, 6)\n\nplt.tight_layout()\nplt.show()\n\nN: 10 kleinster Mittelwert: 3.00 größter Mittelwert: 5.80 Stichprobenmittelwert: 4.12\n\nN: 10 kleinster Mittelwert: 2.60 größter Mittelwert: 4.70 Stichprobenmittelwert: 3.36\n\nN: 10 kleinster Mittelwert: 2.75 größter Mittelwert: 4.00 Stichprobenmittelwert: 3.48\n\n\n\n\n\n\n\n\n\n\n\nNormalverteilung erklären\n\nMit ChatGPT klappt das nicht so toll. :D Würfeln lassen\n\nxlim anpassen\n\n\n\n\n\n\n\n\n\n\nPrompt: Schreibe mir python code (basispython, numpy oder pandas) um Daten für eine Normalverteilung zu erstellen und diese in Form eines Balkendiagramm darzustellen. Zusätzlich sollen der Mittelwert und die Standardabweichung 1s, 2s und 3s in beide Richtungen eingezeichnet sein.\nPrompt: Bitte ohne das Modul seaborn.\nDer Code wurde anschließend modifiziert: Anpassung der Linientypen.\n\nIdee: Wenn eine Stichprobe aus einer Grundgesamtheit gezogen wird, dann streut der Stichprobenmittelwert um den Mittelwert der Grundgesamtheit.\nUmgekehrte Idee: Mit der gleichen Wahrscheinlichkeitsverteilung liegt der Mittelwert der Grundgesamtheit um den Stichprobenmittelwert.\n\n\n\n\n\n\n\nHinweis 1.1: Standardabweichung und Varianz in der Grundgesamtheit\n\n\n\nIn der Stochastik werden Formeln häufig auch mit griechischen Buchstaben geschrieben, wenn Sie sich statt auf eine Stichprobe auf die Grundgesamtheit beziehen.\nDer Mittelwert in der Grundgesamtheit wird auch Erwartungswert genannt und mit dem griechischen Buchstaben \\(\\mu\\) (My) dargestellt. Die Standardabweichung des Erwartungswerts wird mit \\(\\sigma\\) (Sigma) gekennzeichnet. \\[\n\\sigma = \\sqrt{\\frac{1}{N} \\sum_{i=1}^{N}(x_i - \\mu)^2}\n\\]\n\n\n\n\nAufgabe Verteilungskenngrößen\nDie Varianz und die Standardabweichung einer Messreihe können mit vielen Computerprogrammen berechnet werden. Bevor wir auf die in Python verfügbaren Methoden eingehen, sollen die Kenngrößen arithmetischer Mittelwert, Varianz, Standardabweichung und Stichprobenfehler zunächst selbst berechnet werden.\nDazu verwenden wir die Messreihe zur Länge zahnbildender Zellen bei Meerschweinchen, die Vitamin C direkt (VC) oder in Form von Orangensaft (OJ) in unterschiedlichen Dosen erhielten.\n\n\n\n\n\ndateipfad = \"01-daten/ToothGrowth.csv\"\nmeerschweinchen = pd.read_csv(filepath_or_buffer = dateipfad, sep = ',', header = 0, \\\n  names = ['ID', 'len', 'supp', 'dose'], dtype = {'ID': 'int', 'len': 'float', 'dose': 'float', 'supp': 'category'})\n\n\n\nCode-Block 1.1\n\n\n\nCrampton, E. W. 1947. „THE GROWTH OF THE ODONTOBLASTS OF THE INCISOR TOOTH AS A CRITERION OF THE VITAMIN C INTAKE OF THE GUINEA PIG“. The Journal of Nutrition 33 (5): 491–504. https://doi.org/10.1093/jn/33.5.491\nDer Datensatz kann in R mit dem Befehl “ToothGrowth” aufgerufen werden.\n\n\n\n\n\n\n\n\n\n\n \nBerechnen Sie den arithmetischen Mittelwert, die Varianz, die Standardabweichung und den Stichprobenfehler der Messreihe zur Zahnlänge (len). Verwenden Sie dazu die vorgestellten Formeln.\nDas Ergebnis könnte so aussehen:\n\n\nN: 60\narithmetisches Mittel: 18.81\nStichprobenfehler: 0.99\nStichprobenvarianz: 58.51\nStandardabweichung: 7.65\n\n\n\n\n\n\n\n\nTipp 1.1: Musterlösung Verteilungskenngrößen\n\n\n\n\n\n\ndef verteilungskennwerte(x, output = True):\n\n  # Anzahl Messwerte bestimmen\n  N = len(x)\n\n  # arithmetisches Mittel bestimmen\n  mittelwert = sum(x) / N\n\n  # Stichprobenvarianz bestimmen\n  stichprobenvarianz = sum((x - mittelwert) ** 2) / (N - 1)\n\n  # Standardabweichung bestimmen\n  standardabweichung = stichprobenvarianz ** (1/2)\n\n  # Ausgabe\n  if output: # output = True\n    print(f\"N: {N}\\n\",\n          f\"arithmetisches Mittel: {mittelwert:.2f}\\n\",\n          f\"Stichprobenvarianz: {stichprobenvarianz:.2f}\\n\",\n          f\"Standardabweichung: {standardabweichung:.2f}\",\n          sep = '')\n\n  else: # output = False\n    return N, mittelwert, stichprobenvarianz, standardabweichung\n\ntooth_length = meerschweinchen['len']\nverteilungskennwerte(tooth_length)\n\n\n\n\n \nDie Module NumPy und Pandas verfügen über eigene Funktionen zur Berechnung der Varianz und der Standardabweichung (siehe folgendes Beispiel).\n\n\n\n\n\n\nBeispiel 1.1: Varianz und Standardabweichung mit NumPy und Pandas\n\n\n\n\n\nDie Varianz und Standardabweichung werden mit den Funktion np.var() und np.std() bzw. den Methoden pd.var() und pd.std() berechnet. Der Parameter ddof (delta degrees of freedom) steuert, welcher Nenner zur Berechnung der Varianz verwendet wird in der Form N - ddof. Während der Standardwert in NumPy 0 ist, berechnet Pandas mit dem Standardwert ddof=1 die Stichprobenvarianz.\n\nprint(\"Varianz:\")\nprint(f\"NumPy:\\t{np.var(tooth_length):.2f}\")\nprint(f\"Pandas:\\t{tooth_length.var():.2f}\")\n\nprint(\"\\nStandardabweichung:\")\nprint(f\"NumPy:\\t{np.std(tooth_length):.2f}\")\nprint(f\"Pandas:\\t{tooth_length.std():.2f}\")\n\nVarianz:\nNumPy:  57.54\nPandas: 58.51\n\nStandardabweichung:\nNumPy:  7.59\nPandas: 7.65",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Das Prinzip von Messungen</span>"
    ]
  },
  {
    "objectID": "skript/einleitung.html#die-ideale-messung",
    "href": "skript/einleitung.html#die-ideale-messung",
    "title": "1  Das Prinzip von Messungen",
    "section": "1.2 Die ideale Messung",
    "text": "1.2 Die ideale Messung\n\n\n\n\n\n\nDefinition 1.2: ideale Messung\n\n\n\n\nDie ideale Messung ist eine direkte Messung oder der gesuchte Wert hängt linear (direkt?!) vom gemessenen Wert ab.\nDie ideale Messung ist genau und präzise.\n\n\n\n\nDirekte und indirekte Messung\nBei einer direkten Messung wird die Messgröße durch den unmittelbaren Vergleich mit einem Normal oder einem genormten Bezugssystem gewonnen.\n\n\n\n\n\n\n\n\n\nBalkenwaage\n\n\n\n\n\n\n\nZollstock\n\n\n\n\n\n\nAbbildung 1.2: Direkte Messung\n\n\n\nGliedermaßstäbe von Fst76 ist lizensiert unter CC-BY-SA 3.0 und ist abrufbar auf Wikimedia. 2014\n\n \nBei einer indirekten Messung wird die Messgröße auf eine andere pyhsikalische Größe zurückgeführt.\n\n\n\n\n\n\n\n\n\nFederwaage\n\n\n\n\n\n\n\nLaserentfernungsmessung\n\n\n\n\n\n\nAbbildung 1.3: Indirekte Messung\n\n\n\nSpring scale von Amada44 steht unter der Lizenz CC-BY-SA-3.0 unported und ist abrufbar auf Wikimedia. 2016\nObserve the Moon wurde von der NASA veröffentlicht und ist abrufbar unter nasa.gov. 2010\n\n\n\nGenauigkeit und Präzision (gehört zu linearer Regression)\nDie Genauigkeit\nVerzerrung (Bias): https://de.wikipedia.org/wiki/Verzerrung_einer_Sch%C3%A4tzfunktion quantifiziert das systematische Über- oder Unterschätzen der Schätzfunktion\nStreuung und Normalverteilung… Stichprobenfehler.\nStichprobenfehler der Meerschweinchenmessung bestimmen Alternativ: mit Würfeldaten simulieren. Erwartungswert eines W6 = 3,5",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Das Prinzip von Messungen</span>"
    ]
  },
  {
    "objectID": "skript/einleitung.html#normalverteilung",
    "href": "skript/einleitung.html#normalverteilung",
    "title": "1  Das Prinzip von Messungen",
    "section": "1.3 Normalverteilung",
    "text": "1.3 Normalverteilung\nHistogramm und Standardabweichung\nDer Meerschweinchen-Datensatz ist nicht gleichverteilt (die Gruppengrößen sind gleich und die Länge nähert sich einem natürlichen Maximum an.)\n\nmeerschweinchen['len'].plot(kind = 'hist', bins = 7)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Das Prinzip von Messungen</span>"
    ]
  },
  {
    "objectID": "skript/hooke.html",
    "href": "skript/hooke.html",
    "title": "2  Messreihe Hooke’sches Gesetz",
    "section": "",
    "text": "Deskriptive Statistik\nDas Hooke’sche Gesetz, benannt nach dem englischen Wissenschaftler Robert Hooke, beschreibt die Beziehung zwischen der Kraft \\(F\\) und der Längenänderung \\(\\Delta{x}\\) einer Feder durch die Gleichung \\(F = k \\times \\Delta{x}\\), wobei \\(k\\) die Federkonstante ist. Die Federkonstante ist eine grundlegende Eigenschaft elastischer Materialien und gibt an, wie viel Kraft erforderlich ist, um eine Feder um eine bestimmte Läange zu dehnen oder zu komprimieren. Das Hooke’sche Gesetz besagt, dass die Deformation eines elastischen Körpers proportional zur aufgebrachten Kraft ist, solange die Feder nicht über den elastischen Bereich hinaus gedehnt oder gestaucht wird.\nIn einem Experiment wurde das Hooke’sche Gesetz experimentell überprüft.\nDie Messreihe liegt in Form einer CSV-Datei unter dem Pfad “01-daten/hooke_data.csv” vor. Die Datei kann direkt mit Python oder mit den Modulen NumPy und Pandas eingelesen werden.\nNach dem Einlesen sollte man sich einen Überblick über die Daten verschaffen. Dafür eignet sich besonders das Modul Pandas. Mit den Methoden pd.DataFrame.head() und pd.DataFrame.tail() kann schnell ein Ausschnitt der Daten betrachtet werden.\nprint(hooke.head(), \"\\n\")\nprint(hooke.tail())\n\n   no  mass  distance\n0   0   705    153.29\n1   1   705    152.74\n2   2   705    153.27\n3   3   705    152.81\n4   4   705    152.77 \n\n      no  mass  distance\n109  109     0    173.70\n110  110     0    173.44\n111  111     0    173.75\n112  112     0    173.30\n113  113     0    200.00\nDie Methode pd.DataFrame.describe() erstellt die deskriptive Statistik für den Datensatz. Diese ist in diesem Fall jedoch noch nicht sonderlich nützlich. Die Spalte ‘no’ enthält lediglich eine laufende Versuchsnummer, die Spalte ‘mass’ enhält verschiedene Gewichte.\nhooke.describe()\n\n\n\n\n\n\n\n\nno\nmass\ndistance\n\n\n\n\ncount\n114.000000\n114.000000\n114.000000\n\n\nmean\n56.561404\n394.921053\n162.301754\n\n\nstd\n33.131552\n226.237605\n7.483767\n\n\nmin\n0.000000\n0.000000\n152.740000\n\n\n25%\n28.250000\n201.000000\n156.622500\n\n\n50%\n56.500000\n452.000000\n160.720000\n\n\n75%\n84.750000\n605.000000\n167.767500\n\n\nmax\n113.000000\n705.000000\n200.000000\nSinnvoller ist eine nach dem verwendeten Gewicht aufgeteilte beschreibende Statistik der gemessenen Ausdehnung. Dafür kann die Pandas-Methode pd.DataFrame.groupby() verwendet werden. So kann für jedes der gemessenen Gewichte der arithmethische Mittelwert und die Standardabweichung abgelesen werden.\nhooke.groupby(by = 'mass')['distance'].describe()\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nmass\n\n\n\n\n\n\n\n\n\n\n\n\n0\n12.0\n175.828333\n7.620157\n173.27\n173.3150\n173.570\n174.1125\n200.00\n\n\n100\n11.0\n171.044545\n0.985833\n170.15\n170.3650\n170.800\n171.2400\n173.56\n\n\n201\n11.0\n167.791818\n0.296305\n167.26\n167.7200\n167.780\n167.9750\n168.19\n\n\n301\n10.0\n163.710000\n1.660977\n161.60\n162.0575\n163.825\n165.3250\n165.86\n\n\n401\n10.0\n161.967000\n0.313229\n161.42\n161.8450\n161.915\n162.0250\n162.48\n\n\n452\n10.0\n160.713000\n0.627854\n159.98\n160.4575\n160.555\n160.7400\n161.83\n\n\n503\n10.0\n159.314000\n0.781099\n158.43\n158.6400\n159.220\n159.9650\n160.61\n\n\n554\n10.0\n157.547000\n0.523791\n156.92\n157.2075\n157.435\n157.7100\n158.60\n\n\n605\n10.0\n156.142000\n0.354206\n155.62\n156.0700\n156.080\n156.2075\n156.84\n\n\n655\n11.0\n154.022727\n0.224414\n153.72\n153.8800\n153.920\n154.2400\n154.35\n\n\n705\n9.0\n153.008889\n0.241425\n152.74\n152.8100\n152.910\n153.2700\n153.29\nBereits an dieser Stelle könnte die hohe Standardabweichung in der Messreihe mit 0 Gramm auffallen. Leichter ist es jedoch in der grafischen Betrachtung.\nhooke.plot(x = 'mass', y = 'distance', kind = 'scatter', title = \"Messreihe Hooke`sches Gesetz\", ylabel = 'Abstand in cm', xlabel = 'Gewicht in Gramm')\nGrafisch fällt der Messwert von 200 cm für das Gewicht 0 Gramm als stark von den übrigen Messwerten abweichend auf.\nDie Messwerte für das Gewicht 0 Gramm sollen näher betrachtet werden. Dafür werden die Messwerte sowohl absolut, als auch standardisiert in Einheiten der Standardabweichung (z-Werten) ausgedrückt ausgegeben.\ngewicht = 0\n\nz_values = hooke[hooke['mass'] == gewicht].loc[: , 'distance'].apply(lambda x: (x - hooke[hooke['mass'] == gewicht].loc[: , 'distance'].mean()) /  hooke[hooke['mass'] == gewicht].loc[: , 'distance'].std())\nz_values.name = 'z-values'\n\nprint(pd.concat([hooke[hooke['mass'] == gewicht], z_values], axis = 1))\n\n      no  mass  distance  z-values\n102  102     0    173.32 -0.329171\n103  103     0    174.11 -0.225498\n104  104     0    173.42 -0.316048\n105  105     0    174.12 -0.224186\n106  106     0    173.30 -0.331795\n107  107     0    174.21 -0.212375\n108  108     0    173.27 -0.335732\n109  109     0    173.70 -0.279303\n110  110     0    173.44 -0.313423\n111  111     0    173.75 -0.272742\n112  112     0    173.30 -0.331795\n113  113     0    200.00  3.172069\nDer Wert 200 cm in Zeile 113 scheint fehlerhaft zu sein. Eine Eigendehnung der Feder um zusätzliche 16 Zentimeter ist nicht plausibel. Auch der z-Wert &gt; 3 kennzeichnet den Messwert als Ausreißer. Die Zeile wird deshalb aus dem Datensatz entfernt.\nhier Aufklapper Normalverteilung\nhooke.drop(index = 113, inplace = True)\n\nhooke.groupby(by = 'mass')['distance'].describe()\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nmass\n\n\n\n\n\n\n\n\n\n\n\n\n0\n11.0\n173.630909\n0.367409\n173.27\n173.3100\n173.440\n173.9300\n174.21\n\n\n100\n11.0\n171.044545\n0.985833\n170.15\n170.3650\n170.800\n171.2400\n173.56\n\n\n201\n11.0\n167.791818\n0.296305\n167.26\n167.7200\n167.780\n167.9750\n168.19\n\n\n301\n10.0\n163.710000\n1.660977\n161.60\n162.0575\n163.825\n165.3250\n165.86\n\n\n401\n10.0\n161.967000\n0.313229\n161.42\n161.8450\n161.915\n162.0250\n162.48\n\n\n452\n10.0\n160.713000\n0.627854\n159.98\n160.4575\n160.555\n160.7400\n161.83\n\n\n503\n10.0\n159.314000\n0.781099\n158.43\n158.6400\n159.220\n159.9650\n160.61\n\n\n554\n10.0\n157.547000\n0.523791\n156.92\n157.2075\n157.435\n157.7100\n158.60\n\n\n605\n10.0\n156.142000\n0.354206\n155.62\n156.0700\n156.080\n156.2075\n156.84\n\n\n655\n11.0\n154.022727\n0.224414\n153.72\n153.8800\n153.920\n154.2400\n154.35\n\n\n705\n9.0\n153.008889\n0.241425\n152.74\n152.8100\n152.910\n153.2700\n153.29\nHiernach ist die höchste Standardabweichung für die Messreihe mit 301 Gramm zu verzeichnen. Die gemessenen Werte sind jedoch unauffällig.\ngewicht = 301\n\nz_values = hooke[hooke['mass'] == gewicht].loc[: , 'distance'].apply(lambda x: (x - hooke[hooke['mass'] == gewicht].loc[: , 'distance'].mean()) /  hooke[hooke['mass'] == gewicht].loc[: , 'distance'].std())\nz_values.name = 'z-values'\n\nprint(pd.concat([hooke[hooke['mass'] == gewicht], z_values], axis = 1))\n\n    no  mass  distance  z-values\n70  70   301    162.38 -0.800734\n71  71   301    161.93 -1.071658\n72  72   301    161.95 -1.059617\n73  73   301    161.60 -1.270337\n74  74   301    164.59  0.529809\n75  75   301    165.86  1.294419\n76  76   301    163.82  0.066226\n77  77   301    163.83  0.072247\n78  78   301    165.57  1.119823\n79  79   301    165.57  1.119823\nDie Grafik des bereinigten Datensatzes legt einen linearen Zusammenhang nahe. Darüber hinaus sticht der mit zunehmendem Gewicht abfallende Trend der Datenpunkte ins Auge.\nhooke.plot(x = 'mass', y = 'distance', kind = 'scatter', title = 'bereinigter Datensatz', ylabel = 'Abstand in cm', xlabel = 'Gewicht in Gramm')\nEntsprechend des Versuchsaufbaus nimmt mit zunehmender Dehnung der Feder der Abstand zum Abstandssensor ab. Da die Federausdehnung gemessen werden soll, bietet es sich an, die Daten entsprechend zu transformieren. Dazu wird der gemessene Abstand bei 0 Gramm Gewicht als Nullpunkt aufgefasst, von dem aus die Federdehnung gemessen wird. Das bedeutet, dass von allen Datenpunkten das arithmetische Mittel der für 0 Gramm Gewicht gemessen Ausdehnung abgezogen und das Ergebnis mit -1 multipliziert wird.\nnullpunkt = hooke[hooke['mass'] == 0].loc[: , 'distance'].mean()\nprint(f\"Nullpunkt: {nullpunkt:.2f} cm\")\n\nhooke['distance'] = hooke['distance'].sub(nullpunkt).mul(-1)\n\nhooke.plot(x = 'mass', y = 'distance', kind = 'scatter', title = 'bereinigter und invertierter Datensatz', ylabel = 'Federausdehnung in cm', xlabel = 'Gewicht in Gramm')\n\nNullpunkt: 173.63 cm",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Messreihe Hooke'sches Gesetz</span>"
    ]
  },
  {
    "objectID": "skript/hooke.html#federkonstante-bestimmen",
    "href": "skript/hooke.html#federkonstante-bestimmen",
    "title": "2  Messreihe Hooke’sches Gesetz",
    "section": "2.1 Federkonstante bestimmen",
    "text": "2.1 Federkonstante bestimmen\nDie Beziehung zwischen der Kraft \\(F\\) und der Längenänderung \\(\\Delta{x}\\) einer Feder mit Federkonstante \\(k\\) wird durch die Gleichung \\(F = k \\times \\Delta{x}\\) beschrieben. Dabei entspricht die Kraft \\(F\\) dem mit der Fallbeschleunigung \\(g\\) multiplizierten Gewicht in Kilogramm \\(m\\). Die Fallbeschleunigung beträgt auf der Erde \\(9,81 \\frac{m}{s^2}\\).\nDeshalb wird im Datensatz das in der Spalte ‘mass’ eingetragene Gewicht in Gramm in die wirkende Kraft umgerechnet. Ebenso wird die gemessene Abstandsänderung in der Spalte ‘distance’ von Zentimeter in Meter umgerechnet.\n\nhooke['mass'] = hooke['mass'].div(1000).mul(9.81)\nhooke.rename(columns = {'mass': 'force'}, inplace = True)\n\nhooke['distance'] = hooke['distance'].div(100)\n\nprint(hooke.head())\n\n   no    force  distance\n0   0  6.91605  0.203409\n1   1  6.91605  0.208909\n2   2  6.91605  0.203609\n3   3  6.91605  0.208209\n4   4  6.91605  0.208609\n\n\nFür die grafische Darstellung des Zusammenhangs \\(F = k \\times \\Delta{x}\\) ist es zweckmäßiger, die Abstandsänderung auf der x-Achse und die wirkende Kraft auf der y-Achse darzustellen.\n\nhooke.plot(x = 'distance', y = 'force', kind = 'scatter', title = 'umgeformter Datensatz', ylabel = 'wirkende Kraft in $N$', xlabel = 'Abstandsänderung in Meter')\n\n\n\n\n\n\n\n\n\nLineare Ausgleichsrechnung\nDie Ausgleichsrechnung (oder auch Parameterschätzung) ist eine Methode, um für eine Messreihe die unbekannten Parameter des zugrundeliegenden physikalischen Modells zu schätzen. Das Ziel besteht darin, eine (in diesem Fall lineare) Funktion zu bestimmen, die bestmöglich an die Messdaten angepasst ist. (Wikipedia)\nEine lineare Funktion wird durch die Konstante \\(\\beta_0\\), den Schnittpunkt mit der y-Achse, und den Steigungskoeffizienten \\(\\beta_1\\) bestimmt.\n\\[\ny = \\beta_0 + \\beta_1 \\times x\n\\]\nZur Bestimmung der Parameter einer linearen Funktion wird die Methode der linearen Regression verwendet. Die Funktionen dafür stellt das Paket numpy.polynomial bzw. für Polynomfunktionen dessen Modul numpy.polynomial.polynomial bereit.\n\nimport numpy.polynomial.polynomial as poly\n\n\npolyfit und polyeval\nZur Schätzung von Funktionsparametern nach der Methode der kleinsten Quadrate wird die Funktion poly.polyfit(x, y, deg) verwendet. x sind die Werte der unabhängigen Variablen, y die Werte der abhängigen Variablen und deg spezifiziert den Grad der gesuchten Polynomfunktion. deg = 1 spezifiziert eine lineare Funktion.\n\n\n\n\n\n\nBeispiel 2.2: polyfit und polyeval erklärt\n\n\n\n\n\n\n# Beispieldaten erzeugen\nx = np.array(list(range(0, 100)))\ny = x ** 2\n\nprint(np.polynomial.polynomial.polyfit(x, y, 1))\n\n[-1617.    99.]\n\n\nDie Funktion gibt die geschätzten Regressionsparameter als NumPy-Array zurück. Die Terme sind aufsteigend angeordnet, d. h. der Achsabschnitt steht an Indexposition 0, der Steigungskoeffizient an Indexposition 1. Die Ausgabe für ein Polynom zweiten Grades würde beispielsweise so aussehen:\n\nprint(np.polynomial.polynomial.polyfit(x, y, 2))\n\n[ 1.62413205e-12 -5.07904010e-14  1.00000000e+00]\n\n\nMit den Regressionskoeffizienten können die Vorhersagewerte der linearen Funktion berechnet werden. Dafür kann die Funktion poly.polyeval(x, c) verwendet werden. Diese berechnet die Funktionswerte für in x übergebene Wert(e) mit den Funktionsparametern c.\n\n# 'manuelle' Berechnung\nregressions_koeffizienten = np.polynomial.polynomial.polyfit(x, y, 1)\nvorhersagewerte = regressions_koeffizienten[0] + x * regressions_koeffizienten[1]\n\n# Berechnung mit polyeval\nlm = np.polynomial.polynomial.polyfit(x, y, 1)\nvorhersagewerte_polyval = np.polynomial.polynomial.polyval(x, lm)\n\nprint(\"Die Ergebnisse stimmen überein:\", np.equal(vorhersagewerte, vorhersagewerte_polyval).all())\nprint(\"\\nAusschnitt der Vorhersagewerte:\", vorhersagewerte[:10])\n\nDie Ergebnisse stimmen überein: True\n\nAusschnitt der Vorhersagewerte: [-1617. -1518. -1419. -1320. -1221. -1122. -1023.  -924.  -825.  -726.]\n\n\nDas Bestimmtheitsmaß \\(R^2\\) gibt an, wie gut die Schätzfunktion an die Daten angepasst ist. Der Wertebereich reicht von 0 bis 1. Ein Wert von 1 bedeutet eine vollständige Anpassung. Für eine einfache lineare Regression mit nur einer erklärenden Variable kann das Bestimmtheitsmaß als Quadrat des Bravais-Pearson-Korrelationskoeffizienten \\(r\\) berechnet werden. Dieser wird mit der Funktion np.corrcoef(x, y) ermittelt (die eine Matrix der Korrelationskoeffizienten ausgibt).\n\nprint(f\"r = {np.corrcoef(x, y)[0, 1]:.2f}\")\nprint(f\"R\\u00b2 = {np.corrcoef(x, y)[0, 1] ** 2:.2f}\")\n\nr = 0.97\nR² = 0.94\n\n\nDie Daten und die geschätzte Gerade können grafisch dargestellt werden.\n\nimport matplotlib.pyplot as plt\n\nplt.scatter(x, y, label = 'Beispieldaten')\nplt.plot(x, vorhersagewerte, label = 'Vorhersagewerte')\nplt.annotate(\"$R^2$ = {:.2f}\".format(np.corrcoef(x, y)[0, 1] ** 2), (max(x) * 0.9, 1))\n\nplt.title(label = 'Beispieldaten und geschätzte Linearfunktion')\nplt.xlabel('x-Werte')\nplt.ylabel('y-Werte')\nplt.legend()\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBeispiel 2.3: to do: numpy.polyfit & numpy.polyval\n\n\n\n\n\nin den Aufklapper verschieben legacy - wichtigster Unterschied: Ausgabe der Koeffizienten in umgekehrter Reihenfolge!\nWarnung / ein Hinweis, dass man es nicht mehr benutzen soll. https://numpy.org/doc/stable/reference/generated/numpy.polyfit.html\nHier auch noch mal deutlicher: https://numpy.org/doc/stable/reference/routines.polynomials.html “As noted above, the poly1d class and associated functions defined in numpy.lib.polynomial, such as numpy.polyfit and numpy.poly, are considered legacy and should not be used in new code. Since NumPy version 1.4, the numpy.polynomial package is preferred for working with polynomials.”\npolyfit https://numpy.org/doc/stable/reference/generated/numpy.polyfit.html\npolyval numpy.polyval(p, x) … evaluiere Wert(e) p mit Modellkoeffizienten x.\nhttps://numpy.org/doc/stable/reference/generated/numpy.polyval.html\n\n\n\nFederkonstante bestimmen\nDie Parameter der an die Messwerte angepassten linearen Funktion und das Bestimmtheitsmaß lauten:\n\nprint(np.polynomial.polynomial.polyfit(hooke['distance'], hooke['force'], 1))\n\nprint(f\"r = {np.corrcoef(hooke['distance'], hooke['force'])[0, 1]:.2f}\")\nprint(f\"R\\u00b2 = {np.corrcoef(hooke['distance'], hooke['force'])[0, 1] ** 2:.2f}\")\n\n[ 0.05753159 33.01899551]\nr = 0.99\nR² = 0.99\n\n\nMit den Regressionskoeffizienten können die Vorhersagewerte der linearen Funktion berechnet werden.\n\n# Berechnung mit polyeval\nlm = np.polynomial.polynomial.polyfit(hooke['distance'], hooke['force'], 1)\nvorhersagewerte_hooke = np.polynomial.polynomial.polyval(hooke['distance'], lm)\n\nDie Messreihe und die darauf angepasste lineare Funktion können grafisch dargestellt werden.\n\n# Platzhalter\nx = hooke['distance']\ny = hooke['force']\n\n# Plot erstellen\nplt.scatter(x, y, label = 'Messdaten')\nplt.plot(x, vorhersagewerte_hooke, label = 'Vorhersagewerte')\nplt.annotate(\"$R^2$ = {:.2f}\".format(np.corrcoef(x, y)[0, 1] ** 2), (max(x) * 0.9, 1))\n\nplt.title(label = 'Messdaten und geschätzte Linearfunktion')\nplt.xlabel('gemessene Abstandsänderung')\nplt.ylabel('wirkende Kraft')\nplt.legend()\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nMessabweichung quantifizieren\nKonfidenzintervall des Regressionskoeffizienten berechnen:\nhttps://mountain-hydrology-research-group.github.io/data-analysis/modules/module4/lab4-3.html\n(benötigt aber stats für die t-Verteilung)\nto do: plt.errorbar (capsize = 3 macht kleine Linien an den Enden der Kerze)\nwann / wozu braucht man das: Durch Umstellen nach der Federkonstante \\(k\\) kann diese wie folgt ermittelt werden:\n\\[\nk = \\frac{m \\times g}{\\Delta{x}}\n\\]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Messreihe Hooke'sches Gesetz</span>"
    ]
  }
]